datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//Marcius
model User {
  id         Int      @id @default(autoincrement())
  name       String
  cpf        String   @unique
  email      String   @unique
  pass       String
  phone      String
  signature  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // quem carrega o 1 tem o vetor para muitos
  habits     Habit[]
  // quem carrega o 1 do um pra um
  //habits     Habit?

  groups GroupUser[]


  @@map("users")
}

//Aula
model Habit {
  id         Int      @id @default(autoincrement())
  name       String
  description String
  urlImage   String
  isActive   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // FK → User
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  //variavel  Model  relação (FK, PK, ação)

  @@map("habits")
}

model Role{
  id         Int      @id @default(autoincrement())
  name       String   @unique
  description String

  groups RoleGroup[]
}

model Group{
  id         Int      @id @default(autoincrement())
  name       String   @unique
  description String

  roles RoleGroup[]
  users GroupUser[]
}

model GroupUser {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId Int

  group Group @relation(fields: [groupId], references: [id])
  groupId Int

  @@unique([userId, groupId], name: "userId_groupId")
}

model RoleGroup {
  id Int @id @default(autoincrement())

  group Group @relation(fields: [groupId], references: [id])
  groupId Int

  role Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@unique([groupId, roleId], name: "groupId_roleId") 
}

